-- | Este módulo define funções comuns da Tarefa 2 do trabalho prático.
module Tarefa2_2018li1g156 where

import LI11819
import Tarefa0_2018li1g156
import Tarefa1_2018li1g156


-- * Testes

-- | Testes unitários da Tarefa 2.
--
-- Cada teste é um triplo (/identificador do 'Jogador'/,/'Jogada' a efetuar/,/'Estado' anterior/).
testesT2 :: [(Int,Jogada,Estado)]
testesT2 = [(3, Movimenta E, Estado (constroi teste2) ljogs1 []), 
            (1, Movimenta E, Estado (constroi teste2) ljogs2 ldps1),
            (2, Dispara Choque, Estado (constroi teste2) ljogs1 ldps1),
            (3, Dispara Laser, Estado (constroi teste2) ljogs1 ldps1),
            (1, Dispara Choque, Estado (constroi teste2) ljogs1 ldps1),
            (2, Movimenta C, Estado (constroi teste4) ljogs2 ldps2)]


ljogs1 = [jog1, jog2, jog3, jog4]
ljogs2 = [jog3, jog4, jog5, jog1]

jog1 = Jogador (1,3) C 3 3 3
jog2 = Jogador (1,11) B 2 4 0
jog3 = Jogador (11,1) B 0 2 2
jog4 = Jogador (8,11) E 1 0 3
jog5 = Jogador (6,11) D 1 0 3

ldps1 = [dp1, dp2, dp3]
ldps2 = [dp2, dp1, dp4, dp3]

dp1 = DisparoCanhao 1 (2,11) B
dp2 = DisparoChoque 2 5 
dp3 = DisparoLaser 3 (1,3) D
dp4 = DisparoCanhao 0 (3,5) E

-- * Funções principais da Tarefa 2.

-- | Efetua uma jogada.
jogada :: Int -- ^ O identificador do 'Jogador' que efetua a jogada.
       -> Jogada -- ^ A 'Jogada' a efetuar.
       -> Estado -- ^ O 'Estado' anterior.
       -> Estado -- ^ O 'Estado' resultante após o jogador efetuar a jogada.


jogada numJ (Movimenta dire) (e@(Estado m lJogs lDips)) | vidasJogador jEmCausa <= 0 = e
                                                        | emChoque numJ (posicaoJogador jEmCausa) lDips lJogs || dire /= direcaoJogador jEmCausa 
                                                        = e {jogadoresEstado = atualizaIndiceLista numJ (jEmCausa {direcaoJogador = dire}) lJogs}
                                                        | caminhoLivre (posicaoJogador jEmCausa) dire lJogs m 
                                                        = e {jogadoresEstado = atualizaIndiceLista numJ (jEmCausa {posicaoJogador = somaVetores (direcaoParaVetor dire) (posicaoJogador jEmCausa)}) lJogs} 
                                                        | otherwise = e
                                                  where jEmCausa = encontraIndiceLista numJ lJogs
jogada numJ (Dispara arma) e | vidasJogador jEmCausa <= 0 || zeroBalas jEmCausa arma = e
                             | otherwise = e {jogadoresEstado = atualizaIndiceLista numJ jUpd (jogadoresEstado e), 
                                              disparosEstado = novoDisp : disparosEstado e}
                       where jEmCausa = encontraIndiceLista numJ (jogadoresEstado e)
                             (jUpd, novoDisp) = parJogadorDisparo numJ jEmCausa arma
  
-- | Verifica se o 'Jogador' não tem balas.

zeroBalas :: Jogador -- ^ 'Jogador' a tratar.
          -> Arma    -- ^ Tipo de 'Arma' a observar.
          -> Bool   
zeroBalas jgr Choque = choquesJogador jgr == 0
zeroBalas jgr Laser = lasersJogador jgr == 0 

-- | Verifica se um determinado 'Jogador' está afetado pelo por um 'DisparoChoque'.

emChoque :: Int           -- ^ Identificador do 'Jogador'.
         -> PosicaoGrelha -- ^ 'Posicao' do 'Jogador' em causa.
         -> [Disparo]     -- ^ Lista de 'Disparo' do 'Estado'.
         -> [Jogador]     -- ^ Lista de 'Jogador' do 'Estado'.
         -> Bool          
emChoque n (x,y) [] _ = False 
emChoque n (x,y) (DisparoChoque nJ temp:t) lJog = ((n /= nJ) && ( abs(x - xD) <= 3) && abs(y - yD) <= 3) || emChoque n (x,y) t lJog
                  where (xD, yD) = posicaoJogador (encontraIndiceLista nJ lJog)
emChoque n (x,y) (_:t) lJog = emChoque n (x,y) t lJog

-- | Verifica se a 'Posicao' que um determinado 'Jogador' pretende movimentar-se está livre.

caminhoLivre :: PosicaoGrelha -- ^ 'Posicao' do 'Jogador' em causa.
             -> Direcao       -- ^ 'Direcao' do 'Jogador' em causa.
             -> [Jogador]     -- ^ Lista de 'Jogador' do 'Estado'.
             -> Mapa          -- ^ 'Mapa' do jogo.
             -> Bool          
caminhoLivre (x,y) dire [] m  | dire == C = encontraPosicaoMatriz (x + vX, y + vY + 1) m == Vazia  && encontraPosicaoMatriz (x + vX, y + vY) m == Vazia 
                              | dire == D = encontraPosicaoMatriz (x + vX + 1, y + vY + 1) m == Vazia  && encontraPosicaoMatriz (x + vY, y + vY + 1) m == Vazia
                              | dire == B = encontraPosicaoMatriz (x + vX + 1, y + vY + 1) m == Vazia  && encontraPosicaoMatriz (x + vY + 1, y + vY) m == Vazia
                              | dire == E = encontraPosicaoMatriz (x + vX + 1, y + vY) m == Vazia  && encontraPosicaoMatriz (x + vY, y + vY) m == Vazia 
                              where  (vX, vY) = direcaoParaVetor dire
caminhoLivre (x,y) dire (h:t) m | vidasJogador h <= 0 = caminhoLivre (x,y) dire t m 
                                | otherwise = ((x-x1)^2 + (y-y1)^2 > 4 || (x-x1)^2 + (y-y1)^2 == 0) && caminhoLivre (x,y) dire t m
                              where (x1,y1) = posicaoJogador h 



-- | Desvolve um par em que retira ao 'Jogador' uma bala, se a 'Arma' não é 'Canhao', e cria um 'Disparo'.

parJogadorDisparo :: Int                -- ^ Identificador do 'Jogador'.
                  -> Jogador            -- ^ 'Jogador' em causa. 
                  -> Arma               -- ^ 'Arma' utilizada.
                  -> (Jogador, Disparo) -- ^ Par resultante.
parJogadorDisparo n jgr arma | arma == Canhao = ( jgr , 
                                                  DisparoCanhao { jogadorDisparo = n, 
                                                                  posicaoDisparo = (x + vX, y + vY), 
                                                                  direcaoDisparo = direcaoJogador jgr })                                                    
                             | arma == Laser =  ( jgr { lasersJogador = lasersJogador jgr - 1} ,
                                                  DisparoLaser { jogadorDisparo = n,
                                                                posicaoDisparo = (x + vX, y + vY),
                                                                direcaoDisparo = direcaoJogador jgr} )
                             | arma == Choque = ( jgr { choquesJogador = choquesJogador jgr - 1}, 
                                                  DisparoChoque { jogadorDisparo = n,
                                                                  tempoDisparo = 5})
      where (x, y)   = posicaoJogador jgr
            (vX, vY) = direcaoParaVetor (direcaoJogador jgr)

