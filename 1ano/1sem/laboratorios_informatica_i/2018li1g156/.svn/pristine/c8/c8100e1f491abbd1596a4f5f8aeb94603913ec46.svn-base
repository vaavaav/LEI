-- | Este módulo define funções comuns da Tarefa 3 do trabalho prático.
module Tarefa3_2018li1g156 where

import LI11819
import Tarefa0_2018li1g156
import Tarefa1_2018li1g156
import Tarefa2_2018li1g156

-- * Testes

-- | Testes unitários da Tarefa 3.
--
-- Cada teste é um 'Estado'.
testesT3 :: [Estado]
testesT3 = [Estado (constroi teste2) ljogs1 ldps1, Estado (constroi teste4) ljogs2 ldps2]

-- * Funções principais da Tarefa 3.

-- | Comprime um 'Estado' para formato textual.
--
-- __NB:__ A função 'show' representa um 'Estado' num formato textual facilmente legível mas extenso.
--
-- __NB:__ Uma boa solução deve representar o 'Estado' dado no mínimo número de caracteres possível.
comprime :: Estado -> String
comprime (Estado m jgs dps) = (unwords ( map (codificaEmChar . divideEm6Char 0) (abc m)) ++ ('.':converteListaJogadores jgs) ++ ('.':converteListaDisparos dps))

abc :: Mapa -> [String]
abc [] = []
abc m = map converteListaMapa ((take (fst (dimensaoMatriz m) - 2) . (drop 1)) (map (take (snd (dimensaoMatriz m) - 2) . (drop 1))  m))


-------WIP-------
-----------------
divideEm6Char :: Int -> String -> [String]
divideEm6Char _ [] = []
divideEm6Char _ [h] = [[h]]
divideEm6Char n (h:t) | n == 5 = [h]:divideEm6Char 0 t
                      | otherwise = (h:h1):t1
                      where (h1:t1) = divideEm6Char (n+1) t


codificaEmChar :: [String] -> String
codificaEmChar [] = []
codificaEmChar (s:ls) = (toEnum (read s :: Int):: Char) : codificaEmChar ls


--------
--------
converteListaMapa :: [Peca] -> String
converteListaMapa [] = ""
converteListaMapa (h:t) | h == Vazia = '1':converteListaMapa t             
                        | h == Bloco Indestrutivel = '3':converteListaMapa t  
                        | h == Bloco Destrutivel = '2':converteListaMapa t

converteListaJogadores :: [Jogador] -> String
converteListaJogadores [] = []
converteListaJogadores (h:t) = hString ++ converteListaJogadores t
                    where hString = "J" ++ unwords [show x , show y , show (dirInt(direcaoJogador h)), show (vidasJogador h) , show (lasersJogador h) , show (choquesJogador h)]
                          (x,y) = posicaoJogador h 

converteListaDisparos :: [Disparo] -> String
converteListaDisparos [] = []
converteListaDisparos (DisparoChoque n ti : t) = hString ++ converteListaDisparos t
                    where hString = "DX" ++ unwords [show n , show ti]
converteListaDisparos (DisparoLaser a (x,y) c : t) = hString ++ converteListaDisparos t
                    where hString = "DL" ++ unwords [show a , show x , show y , show (dirInt c)]
converteListaDisparos (DisparoCanhao a (x,y) c :t) = hString ++ converteListaDisparos t
                    where hString = "DC" ++ unwords [show a , show x , show y , show (dirInt c)] 

dirInt :: Direcao -> Int 
dirInt E = 3
dirInt x = dirInt (succ x) - 1

-- | Descomprime um 'Estado' no formato textual utilizado pela função 'comprime'.
--
-- __NB:__ A função 'comprime' é válida de for possível recuperar o 'Estado' utilizando a função 'descomprime', i.e.:
--
-- prop> descomprime . comprime = id
--
-- __NB:__ Esta propriedade é particularmente válida para a solução pré-definida:
--
-- prop> read . show = id
descomprime :: String -> Estado
descomprime x = Estado {
                       mapaEstado = constroiMapa (mapaInicial dim) (0,0) dim mDes,
                       jogadoresEstado = (map (criaJogador) . drop 1) (separador j 'J'),
                       disparosEstado = criaDisparos (drop 1 (separador d 'D'))
                       }
               where dim = (l + 2, (div e l) +2)
                     (l,e) = calculaDimensao mDes
                     mDes = descodificaMapa m
                     [m, j, d] = separador x '.'

-- | Usando a função auxiliar 'separaDimensao', transforma a string em causa num tuple que representa a 'Dimensao' (Int,Int).

dimensaoMapa :: String   -- ^ 'String' em causa.
             -> Dimensao -- ^ Tuple final.
dimensaoMapa (h:t) = (read (x) :: Int, read (y) :: Int)
                                  where (x,y) = separaDimensao (h:t)

-- | Dados carateres separados pelo carater 'espaço' que representam a dimensão do mapa, separa o numero de linhas e de colunas num tuple ('String','String').

separaDimensao :: String           -- ^ Carateres a tratar.
               -> (String, String) -- ^ Tuple que resulta da função.
separaDimensao (h:t) | h == ' ' = ([], t)
                     | otherwise = (h:x,y)
                     where (x,y) = separaDimensao t

----------WIP------
-------------------

descodificaMapa :: String -> String
descodificaMapa [] = []
descodificaMapa (h:t) | h == ' ' = h : descodificaMapa t 
                      | otherwise = show(fromEnum h) ++ (descodificaMapa t)

calculaDimensao :: String -> (Int,Int)
calculaDimensao [] = (1,0) 
calculaDimensao (h:t) | h == ' ' = (l+1,e)
                      | otherwise = (l, e+1)
                    where (l,e) = calculaDimensao t


----------------------
---------------------





-- | Converte uma 'String' em 'Mapa'.

constroiMapa :: Mapa     -- ^ 'Mapa' inicial .
             -> Posicao  -- ^ Primeira 'Posicao' do 'Mapa'.
             -> Dimensao -- ^ 'Dimensao' do 'Mapa'.
             -> String   -- ^ 'Mapa' codificado em 'String'.
             -> Mapa     -- ^ 'Mapa' resultante.
constroiMapa _ (_,_) (0,_) [] = []
constroiMapa _ (_,_) (_,0) [] = []
constroiMapa m (_,_) (_,_) [] = m 
constroiMapa m (x,y) (l,c) (h:t) | x == l - 2 = m
                                 | y == c - 2 = constroiMapa m (x+1,0) (l,c) t 
                                 | h == '1' = constroiMapa m (x,y+1) (l,c) t
                                 | otherwise = constroiMapa newMap (x,y+1) (l,c) t
                                 where newMap = atualizaPosicaoMatriz (x+1,y+1) elem m 
                                       elem = if (h == '2') then Bloco Destrutivel else Bloco Indestrutivel

criaJogador :: String -> Jogador
criaJogador s = Jogador { posicaoJogador = (x,y),
                          direcaoJogador = inversaDirInt d,
                          vidasJogador = v,
                          lasersJogador = l,
                          choquesJogador = c }
              where [x,y,d,v,l,c] = (map (read) (separador s ' ') ) :: [Int]

criaDisparos :: [String] -> [Disparo]
criaDisparos [] = []
criaDisparos (('X':hs):t) = DisparoChoque { jogadorDisparo = n, 
                                           tempoDisparo = ti } : criaDisparos t
                         where [n,ti] = (map read (separador hs ' ')) :: [Int]
criaDisparos (('L':hs):t) = DisparoLaser { jogadorDisparo = n,
                                          posicaoDisparo = (x,y),
                                          direcaoDisparo = inversaDirInt c } : criaDisparos t
                    where [n,x,y,c] = (map read (separador hs ' ')) :: [Int]
criaDisparos (('C':hs):t) = DisparoCanhao { jogadorDisparo = n,
                                      posicaoDisparo = (x,y),
                                      direcaoDisparo = inversaDirInt c} : criaDisparos t
                    where [n,x,y,c] = (map read (separador hs ' ')) :: [Int]

inversaDirInt :: Int -> Direcao 
inversaDirInt 3 = E
inversaDirInt x = pred (inversaDirInt (x + 1))

separador :: String -> Char -> [String]
separador [] _ = [""]
separador [h] k = if (h == k) then ["",""] else [[h]]
separador (h:i:t) k | h == k = "" : separador (i:t) k
                    | otherwise = (h : h1) :t1
                  where (h1:t1) = separador (i:t) k
                    
