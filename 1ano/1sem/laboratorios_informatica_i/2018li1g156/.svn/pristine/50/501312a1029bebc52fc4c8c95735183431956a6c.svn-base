-- | Este módulo define funções comuns da Tarefa 3 do trabalho prático.
module Tarefa3_2018li1g156 where

import LI11819
import Tarefa0_2018li1g156
import Tarefa1_2018li1g156
import Tarefa2_2018li1g156

-- * Testes

-- | Testes unitários da Tarefa 3.
--
-- Cada teste é um 'Estado'.
testesT3 :: [Estado]
testesT3 = []

-- * Funções principais da Tarefa 3.

-- | Comprime um 'Estado' para formato textual.
--
-- __NB:__ A função 'show' representa um 'Estado' num formato textual facilmente legível mas extenso.
--
-- __NB:__ Uma boa solução deve representar o 'Estado' dado no mínimo número de caracteres possível.
comprime :: Estado -> String
comprime (Estado m jgs dps) = show (x) ++ (' ' : show (y)) ++ ('.' : unwords ( abc m) ++ ('.':converteListaJogadores jgs) ++ ('.':converteListaDisparos dps))
                            where (x,y) = dimensaoMatriz m 
abc :: Mapa -> [String]
abc [] = []
abc m = map converteListaMapa ((take (fst (dimensaoMatriz m) - 2) . (drop 1)) (map (take (snd (dimensaoMatriz m) - 2) . (drop 1))  m))

-- USAR UNWORDS NA FUNCAO ABC
       
converteListaMapa :: [Peca] -> String
converteListaMapa [] = ""
converteListaMapa (h:t) | h == Vazia = '0':converteListaMapa t
                        | h == Bloco Indestrutivel = '2':converteListaMapa t
                        | h == Bloco Destrutivel = '1':converteListaMapa t

converteListaJogadores :: [Jogador] -> String
converteListaJogadores [] = []
converteListaJogadores (h:t) = hString ++ converteListaJogadores t
                    where hString = "J" ++ unwords [show x , show y , show (dirInt(direcaoJogador h)), show (vidasJogador h) , show (lasersJogador h) , show (choquesJogador h)]
                          (x,y) = posicaoJogador h 

converteListaDisparos :: [Disparo] -> String
converteListaDisparos [] = []
converteListaDisparos (DisparoChoque n ti : t) = hString ++ converteListaDisparos t
                    where hString = "DX" ++ unwords [show n , show ti]
converteListaDisparos (DisparoLaser a (x,y) c : t) = hString ++ converteListaDisparos t
                    where hString = "DL" ++ unwords [show a , show x , show y , show (dirInt c)]
converteListaDisparos (DisparoCanhao a (x,y) c :t) = hString ++ converteListaDisparos t
                    where hString = "DC" ++ unwords [show a , show x , show y , show (dirInt c)] 

dirInt :: Direcao -> Int 
dirInt E = 3
dirInt x = dirInt (succ x) - 1

-- | Descomprime um 'Estado' no formato textual utilizado pela função 'comprime'.
--
-- __NB:__ A função 'comprime' é válida de for possível recuperar o 'Estado' utilizando a função 'descomprime', i.e.:
--
-- prop> descomprime . comprime = id
--
-- __NB:__ Esta propriedade é particularmente válida para a solução pré-definida:
--
-- prop> read . show = id
descomprime :: String -> Estado
descomprime x = Estado {
                       mapaEstado = constroiMapa (mapaInicial (l,c)) (0,0) (l,c) m,
                       jogadoresEstado = (map (criaJogador) . drop 1) (separador j 'J'),
                       disparosEstado = []
                       }
               where (l,c) = dimensaoMapa dim
                     [dim, m, j, d] = separador x '.'

dimensaoMapa :: String -> Dimensao
dimensaoMapa (h:t) = (read (x) :: Int, read (y) :: Int)
                                  where (x,y) = separaDimensao (h:t)

separaDimensao :: String -> (String, String)
separaDimensao (h:t) | h == ' ' = ([], t)
                     | otherwise = (h:x,y)
                     where (x,y) = separaDimensao t
                    
constroiMapa :: Mapa -> Posicao -> Dimensao -> String -> Mapa
constroiMapa m (_,_) (_,_) [] = m 
constroiMapa m (x,y) (l,c) (h:t) | x == l - 2 = m
                                 | y == c - 2 = constroiMapa m (x+1,0) (l,c) t 
                                 | h == '0' = constroiMapa m (x,y+1) (l,c) t
                                 | otherwise = constroiMapa newMap (x,y+1) (l,c) t
                                 where newMap = atualizaPosicaoMatriz (x+1,y+1) elem m 
                                       elem = if (h == '1') then Bloco Destrutivel else Bloco Indestrutivel

criaJogador :: String -> Jogador
criaJogador s = Jogador { posicaoJogador = (x,y),
                          direcaoJogador = inversaDirInt d,
                          vidasJogador = v,
                          lasersJogador = l,
                          choquesJogador = c }
              where [x,y,d,v,l,c] = (map (read) (separador s ' ') ) :: [Int]
{-
criaDisparo :: String -> Disparo
criaDisparo s | d == 'C' = DisparoCanhao
              | d == 'L' = DisparoChoque
              | d == 'X' = Dis  
-}              
inversaDirInt :: Int -> Direcao 
inversaDirInt 3 = E
inversaDirInt x = pred (inversaDirInt (x + 1))

separador :: String -> Char -> [String]
separador [] _ = [""]
separador [h] k = if (h == k) then ["",""] else [[h]]
separador (h:i:t) k | h == k = "" : separador (i:t) k
                    | otherwise = (h : h1) :t1
                  where (h1:t1) = separador (i:t) k
                    
