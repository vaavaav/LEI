-- | Este módulo define funções comuns da Tarefa 6 do trabalho prático.
module Tarefa6_2018li1g156 where

import LI11819
import Tarefa0_2018li1g156
import Tarefa1_2018li1g156
import Tarefa2_2018li1g156
import Tarefa4_2018li1g156

-- * Funções principais da Tarefa 6.

-- | Define um ro'bot' capaz de jogar autonomamente o jogo.
bot :: Int          -- ^ O identificador do 'Jogador' associado ao ro'bot'.
    -> Estado       -- ^ O 'Estado' para o qual o ro'bot' deve tomar uma decisão.
    -> Maybe Jogada -- ^ Uma possível 'Jogada' a efetuar pelo ro'bot'.
bot n e@(Estado m js ds) | ((contaTrue (podeDisparar jEmCausa js m) >= 3) && (lasersJogador jEmCausa >= 1)) = Just (Dispara Laser)
                         | ((contaTrue (podeDisparar jEmCausa js m) <= 2) && (contaTrue (podeDisparar jEmCausa js m) >= 1)) || ((contaTrue (podeDisparar jEmCausa js m) > 2) && (lasersJogador jEmCausa == 0)) = Just (Dispara Canhao)
                         | distanciaCB jEmCausa ds = Just (Movimenta B)
                         | distanciaDB jEmCausa ds = Just (Movimenta D)
                         | caminhoLivre (somaVetores p (direcaoParaVetor E)) E (elimIndiceLista n js) m  && elem True ((ifTirosX ds jEmCausa)) = Just (Movimenta E)
                         | caminhoLivre (somaVetores p (direcaoParaVetor D)) D (elimIndiceLista n js) m  && elem True ((ifTirosX ds jEmCausa)) = Just (Movimenta D)
                         | caminhoLivre (somaVetores p (direcaoParaVetor C)) C (elimIndiceLista n js) m  && elem True ((ifTirosY ds jEmCausa)) = Just (Movimenta C)
                         | caminhoLivre (somaVetores p (direcaoParaVetor B)) B (elimIndiceLista n js) m  && elem True ((ifTirosY ds jEmCausa)) = Just (Movimenta B)
                         | elem True (naoMata ds (encontraIndiceLista n js)) = Nothing
                         | otherwise = maybeMove (ordemDir d 4) n e
              where jEmCausa@(Jogador p d v l c) = encontraIndiceLista n js 
                  
estadoteste = Estado (constroi []) ([Jogador (4,2) C 1 1 1,Jogador (2,4) B 1 1 1]) []       
estadJogs = [Jogador (4,2) C 1 1 1,Jogador (2,4) B 1 1 1]

ordemDir :: Direcao -> Int -> [Direcao]
ordemDir d n | n == 0 = [] 
             | otherwise = case d of   
                      E -> E : ordemDir C (n-1) 
                      _ -> d : ordemDir (succ d) (n-1) 

maybeMove :: [Direcao] -> Int -> Estado -> Maybe Jogada
maybeMove [] _ _ = Nothing
maybeMove (h:t) n e@(Estado m js ds) | e' == jogada n (Movimenta h) e' = maybeMove t n e
                              | otherwise = Just (Movimenta h)                             
                     where e' = e{jogadoresEstado = atualizaIndiceLista n jEmCausa{direcaoJogador = h} js}
                           jEmCausa@(Jogador p d v l c) = encontraIndiceLista n js 
                                          
ifTirosX :: [Disparo] -> Jogador -> [Bool]
ifTirosX [] j = [False]
ifTirosX (h:t) j@(Jogador (x,y) dir v l c) = case h of
    DisparoChoque n tick -> ifTirosX t j
    _ -> (((x < z) && (y == w) && (dire == C)) || ((x < z) && (y == w+1) && (dire == C)) || ((x < z) && (y == w-1) && (dire == C)) 
         || ((x > z) && (y == w) && (dire == B)) || ((x > z) && (y == w+1) && (dire == B)) || ((x > z) && (y == w-1) && (dire == B))) : ifTirosX t j
        where (z,w) = posicaoDisparo h
              dire = direcaoDisparo h

ifTirosY :: [Disparo] -> Jogador -> [Bool]
ifTirosY [] j = [False]
ifTirosY (h:t) j@(Jogador (x,y) dir v l c) = case h of
    DisparoChoque n tick -> ifTirosY t j
    _ -> (((x == z) && (y < w) && (dire == E)) || ((x == z+1) && (y < w) && (dire == E)) || ((x == z-1) && (y < w) && (dire == E)) 
         || ((x == z) && (y > w) && (dire == D)) || ((x == z+1) && (y > w) && (dire == D)) || ((x == z-1) && (y > w) && (dire == D))) : ifTirosY t j
        where (z,w) = posicaoDisparo h
              dire = direcaoDisparo h

naoMata :: [Disparo] -> Jogador -> [Bool]
naoMata [] j = [False]
naoMata (DisparoChoque n tick : t) j = naoMata t j
naoMata (DisparoCanhao n (z,w) dire : t) j@(Jogador (x,y) d v l c) = (((x == z+2) && (y > w) && (abs (y - w) <= 2) && (dire == D))
                                                                    || ((x == z+2) && (y == w)) 
                                                                    || ((x == z-2) && (y == w)) 
                                                                    || ((x == z+2) && (y < w) && (abs (y - w) <= 2) && (dire == E)) 
                                                                    || ((x == z-2) && (y > w) && (abs (y - w) <= 2) && (dire == D)) 
                                                                    || ((x == z-2) && (y < w) && (abs (y - w) <= 2) && (dire == E)) 
                                                                    || ((x < z) && (y == w+2) && (abs (x - z) <= 2) && (dire == C))
                                                                    || ((x == z) && (y == w+2)) 
                                                                    || ((x == z) && (y == w-2)) 
                                                                    || ((x < z) && (y == w-2) && (abs (x - z) <= 2) && (dire == C)) 
                                                                    || ((x > z) && (y == w+2) && (abs (x - z) <= 2) && (dire == B)) 
                                                                    || ((x > z) && (y == w-2) && (abs (x - z) <= 2) && (dire == B))) : naoMata t j
naoMata (DisparoLaser n (z,w) dire : t) j@(Jogador (x,y) d v l c) = (((x == z+2) && (y > w) && (abs (y - w) <= 2) && (dire == D)) 
                                                                   || ((x == z+2) && (y < w) && (abs (y - w) <= 2) && (dire == E))
                                                                   || ((x == z+2) && (y == w)) 
                                                                   || ((x == z-2) && (y == w)) 
                                                                   || ((x == z-2) && (y > w) && (abs (y - w) <= 2) && (dire == D)) 
                                                                   || ((x == z-2) && (y < w) && (abs (y - w) <= 2) && (dire == E)) 
                                                                   || ((x < z) && (y == w+2) && (abs (x - z) <= 2) && (dire == C)) 
                                                                   || ((x == z) && (y == w+2)) 
                                                                   || ((x == z) && (y == w-2)) 
                                                                   || ((x < z) && (y == w-2) && (abs (x - z) <= 2) && (dire == C)) 
                                                                   || ((x > z) && (y == w+2) && (abs (x - z) <= 2) && (dire == B)) 
                                                                   || ((x > z) && (y == w-2) && (abs (x - z) <= 2) && (dire == B))) : naoMata t j 



distanciaCB :: Jogador -> [Disparo] -> Bool
distanciaCB j@(Jogador (x,y) d v l c) ds = (x == 1 && (elem True (ifTirosY ds j))) || (x == 2 && (elem True (ifTirosY ds j))) || (x == 3 && (elem True (ifTirosY ds j)))

distanciaDB :: Jogador -> [Disparo] -> Bool
distanciaDB j@(Jogador (x,y) d v l c) ds = (y == 1 && (elem True (ifTirosX ds j))) || (y == 2 && (elem True (ifTirosX ds j))) || (y == 3 && (elem True (ifTirosX ds j)))

existeJogador :: [Jogador] -> Posicao -> Bool
existeJogador [] p = False
existeJogador j@((Jogador (x,y) d v l c):t) (z,w) = case d of
      C -> if ((z,w) == (x,y) || (z,w) == (x,y+1) || (z,w) == (x,y-1)) then True else existeJogador t (z,w)
      D -> if ((z,w) == (x,y) || (z,w) == (x+1,y) || (z,w) == (x-1,y)) then True else existeJogador t (z,w)
      B -> if ((z,w) == (x,y) || (z,w) == (x,y+1) || (z,w) == (x,y-1)) then True else existeJogador t (z,w)
      E -> if ((z,w) == (x,y) || (z,w) == (x+1,y) || (z,w) == (x-1,y)) then True else existeJogador t (z,w)

jogVivo :: [Jogador] -> [Jogador]
jogVivo [] = []
jogVivo (h:t) | vidasJogador h == 0 = jogVivo t
              | otherwise = h : jogVivo t

existeBDestr :: Mapa -> Posicao -> Bool
existeBDestr [] p = False
existeBDestr m (x,y) | (encontraPosicaoMatriz (x,y) m) == Bloco Destrutivel = True
                     | otherwise = False
                     
podeDisparar :: Jogador -> [Jogador] -> Mapa -> [Bool]
podeDisparar j@(Jogador (x,y) d v l c) js m = concatenar (map (existeJogador (jogVivo js)) alc,map (existeBDestr m) alc)
 where alc = posicoesDadas (x,y) d (alcanceJogador j m)

contaTrue :: [Bool] -> Int
contaTrue [] = 0
contaTrue (h:t) | h == True = 1 + contaTrue t
                | otherwise = contaTrue t

concatenar :: ([a],[a]) -> [a]
concatenar (a,b) = a ++ b

posicoesDadas :: Posicao -> Direcao -> Int -> [Posicao]
posicoesDadas (x,y) dir int | int == 0 = []
                            | dir == C = (x-1,y) : posicoesDadas (x-1,y) dir (int-1)
                            | dir == D = (x,y+1) : posicoesDadas (x,y+1) dir (int-1)
                            | dir == B = (x+1,y) : posicoesDadas (x+1,y) dir (int-1)
                            | dir == E = (x,y-1) : posicoesDadas (x,y-1) dir (int-1)

alcanceJogador :: Jogador -> Mapa -> Int
alcanceJogador j@(Jogador pos dire v l c) m | stop = 0
                                            | otherwise =  1 + alcanceJogador j{posicaoJogador = somaVetores pos $ direcaoParaVetor dire} m
  where [bloco1, bloco2] = map (somaVetores pos) (blocosVet dire)
        stop = encontraPosicaoMatriz bloco1 m == Bloco Indestrutivel || encontraPosicaoMatriz bloco2 m == Bloco Indestrutivel
