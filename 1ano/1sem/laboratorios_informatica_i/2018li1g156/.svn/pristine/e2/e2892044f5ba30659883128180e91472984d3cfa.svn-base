  -- | Este módulo define funções comuns da Tarefa 5 do trabalho prático.
module Main where
import Graphics.Gloss
import Graphics.Gloss.Interface.Pure.Game
import Graphics.Gloss.Juicy
import LI11819
import Tarefa0_2018li1g156
import Tarefa1_2018li1g156
import Tarefa2_2018li1g156
import Tarefa4_2018li1g156

type Cronometro = Int

type DataJogo = (Estado, Int, Cronometro, [Picture])

-- | Função principal da Tarefa 5.
--
-- __NB:__ Esta Tarefa é completamente livre. Deve utilizar a biblioteca <http://hackage.haskell.org/package/gloss gloss> para animar o jogo, e reutilizar __de forma completa__ as funções das tarefas anteriores.
main :: IO ()
main = do
        Just vaz <- loadJuicyPNG "textures/vaz.png"
        Just bi <- loadJuicyPNG "textures/bi.png"
        Just bd <- loadJuicyPNG "textures/bd.png"
        Just j1 <- loadJuicyPNG "textures/j1.png"
        Just j2 <- loadJuicyPNG "textures/j2.png"
        Just j3 <- loadJuicyPNG "textures/j3.png"
        Just j4 <- loadJuicyPNG "textures/j4.png"
        Just dl1 <- loadJuicyPNG "textures/dl1.png"
        Just dl2 <- loadJuicyPNG "textures/dl2.png"
        Just dl3 <- loadJuicyPNG "textures/dl3.png"
        Just dl4 <- loadJuicyPNG "textures/dl4.png"
        play window              -- janela onde irá correr o jogo
             (greyN 0.5)     -- côr do fundo da janela
             fr              -- frame rate
             ((encontraIndiceLista 0 estadosIniciais), 0, 0, [vaz,bi,bd,j1,j2,j3,j4,dl1,dl2,dl3,dl4])   -- estado inicial
             desEstado   -- desenha o estado do jogo
             reageEvento     -- reage a um evento
             reageTempo      -- reage ao passar do tempo

cores :: [Color]              
cores = [yellow,red,rose,green]

coresX :: [Color]
coresX = [makeColorI 255 255 0 50,makeColorI 255 0 0 50,makeColorI 255 51 153 50,makeColorI 0 255 0 50]

window :: Display
window = FullScreen

fr :: Int
fr = 1

tm :: Float
tm = 32.0

tankGen :: Picture
tankGen = Polygon [(tm,-tm),(tm,tm),(-tm,tm),(-tm,-tm),(tm,-tm)]


listColJ :: [Picture]
listColJ = [tankq,tankq1,tankq2,tankq3]

tankq = Pictures [Color yellow tankGen,Color blue linha]
tankq1 = Pictures [Color red tankGen,Color blue linha]
tankq2 = Pictures [Color rose tankGen,Color blue linha]
tankq3 = Pictures [Color green tankGen,Color blue linha] 

linha :: Picture
linha = Polygon [(-2,0),(-2,tm-4),(2,tm-4),(2,0)]

tiroCD :: Picture
tiroCD = Polygon [(0,0),(-3,-4),(-3,-10),(0,-9),(3,-10),(3,-4),(0,0)]

tiroXD :: Picture
tiroXD = Polygon [(3*tm,-3*tm),(3*tm,3*tm),(-3*tm,3*tm),(-3*tm,-3*tm),(3*tm,-3*tm)]

estadosIniciais :: [Estado]
estadosIniciais = [exemploImportante, (Estado (constroi teste2) ljogs1 [])]

-- dataJogo :: DataJogo 
-- dataJogo = (encontraIndiceLista 0 estadosIniciais, 0, 0, [vazP])


-- | Dado um 'DataJogo' produz uma 'Picture' respetiva ao 'Estado' em causa.
desEstado :: DataJogo -- ^ 'DataJogo' em questão. 
          -> Picture -- ^ A representação gráfica resultante.
desEstado (e@(Estado m js ds),_,ti,l) = Pictures [Translate (-y*tm) (x*tm) (Pictures [Pictures (desMapa m (tm/2, -tm/2) l), 
                                        Pictures (desJogs js 0 l), 
                                        Pictures (desCanhoes ds), 
                                        Pictures (desLasers m ds l), 
                                        Pictures (desChoques js ds)]),
                                        stats e, timer ti]
 where (x,y) = let (a,b) = dimensaoMatriz m in (fromIntegral a / 2.0, fromIntegral b / 2.0) 


-- | Dado um 'Mapa' e uma posição ('Float','Float'), produz uma lista 'Picture', correspondente às representações gráficas de todas as 'Peca's.
desMapa :: Mapa -- ^ O mapa do 'Estado' em causa.
        -> (Float, Float) -- ^ A posição onde a 'Picture' se posicionará.
        -> [Picture] -- ^ A lista de 'Picture' associada às texturas.
        -> [Picture] -- ^ A lista de 'Picture' com as respetivas 'Peca's bem distintas.
desMapa [] _ _ = []
desMapa (h:t) (x,y) l = mapaL h (x,y) l ++ desMapa t (x,y-tm) l
               where mapaL [] _ _ = []
                     mapaL (h:t) (x,y) l = case h of 
                             Bloco Indestrutivel -> (Translate x y (encontraIndiceLista 1 l)) : mapaL t (x+tm,y) l
                             Bloco Destrutivel -> (Translate x y (encontraIndiceLista 2 l)) : mapaL t (x+tm,y) l
                             Vazia -> (Translate x y (encontraIndiceLista 0 l)) : mapaL t (x+tm,y) l

-- | Dado uma lista de 'Jogador'es e um 'Int', identificador do jogador, produz uma lista de 'Picture', correspondente às representações gráficas de todos os 'Jogador'es.
desJogs :: [Jogador] -- ^ A lista de 'Jogador'es do 'Estado' em causa.
        -> Int -- ^ O identificador do Jogador
        -> [Picture] -- ^ A lista de 'Picture's associadas às texturas.
        -> [Picture] -- ^ A lista de 'Picture' com os respetivos 'Jogador'es bem distintos.
desJogs [] _ _ = []
desJogs (j@(Jogador (m,n) d v _ _):js) q ls | v <= 0 = desJogs js (q+1) ls
                                           | otherwise = (Translate ((c+1)*tm) ((-l-1)*tm) (direcaoRoda d p)): desJogs js (q+1) ls
                                     where (l,c) = (fromIntegral m,fromIntegral n)
                                           p = encontraIndiceLista (q+3) ls

-- | Dado uma lista de 'Disparo's, produz uma lista de 'Picture', correspondente às representações gráficas de todos os 'DisparoCanhao'.
desCanhoes :: [Disparo] -- ^ A lista de 'Disparo's do 'Estado' em causa.
           -> [Picture] -- ^ A lista de 'Picture' com os respetivos 'DisparoCanhao' distintos.
desCanhoes [] = []
desCanhoes (d:ds) = case d of
      DisparoCanhao num (m,n) dir -> (Translate ((c+1)*tm) ((-l-1)*tm) ((Color (encontraIndiceLista num cores) . direcaoRoda dir) tiroCD)) : desCanhoes ds
        where (l,c) = (fromIntegral m,fromIntegral n)
      _ -> desCanhoes ds

-- | Dado um 'Mapa' e uma lista de 'Disparo's, produz uma lista de 'Pictures', correspondente às representações gráficas de todos os 'DisparoLaser's.
desLasers :: Mapa -- ^ O 'Mapa' do 'Estado' em causa.
          -> [Disparo] -- ^ A lista de 'Disparo's do 'Estado' em causa.
          -> [Picture] -- ^ A lista de 'Picture's associada às texturas do jogo.
          -> [Picture] -- ^ A lista de 'Picture' com os respetivos 'DisparoLaser' distintos.
desLasers [] _ _ = []
desLasers _ [] _ = []
desLasers m (d:ds) ls = case d of 
      DisparoLaser n (l',c') dir -> (Translate ((c+1)*tm) ((-l-1)*tm) $ (Color (encontraIndiceLista n cores) . direcaoRoda dir) (Pictures (laserPic (alcanceLaser d m) (encontraIndiceLista (n+7) ls)))) : desLasers m ds ls          
            where (l,c) = let (a,b) = subtraiVetores (l',c') (direcaoParaVetor dir) in (fromIntegral a, fromIntegral b) 
      _ -> desLasers m ds ls

-- | Dado um 'Float', devolve uma lista de 'Picture', correspondente à representação gráfica de um 'DisparoLaser'.
laserPic :: Float -- ^ O alcance do 'DisparoLaser' em questão.
         -> Picture -- ^ A textura do laser correspondente.
         -> [Picture] -- ^ A lista de 'Picture' resultante, com o 'DisparoLaser' fragmentado.
laserPic x p | x == 0 = []
             | otherwise = (Translate 0 (x*tm) p): laserPic (x-1) p
        
-- | Dado um 'Disparo', um 'Mapa', produz o alcance de um 'DisparoLaser'.        
alcanceLaser :: Disparo -- ^ O 'DisparoLaser' em questão.
             -> Mapa -- ^ O 'Mapa' do 'Estado' em causa.
             -> Float -- ^ O alcance do 'DisparoLaser'.
alcanceLaser d@(DisparoLaser n pos dire) m | stop = 0
                                           | otherwise =  1 + alcanceLaser d{posicaoDisparo = somaVetores pos $ direcaoParaVetor dire} m
  where [bloco1, bloco2] = map (somaVetores pos) (blocosVet dire)
        stop = encontraPosicaoMatriz bloco1 m == Bloco Indestrutivel || encontraPosicaoMatriz bloco2 m == Bloco Indestrutivel

-- | Dado uma lista de 'Jogador'es, uma lista de 'Disparo's, produz uma lista de 'Picture', correpondente às representações gráficas de todos os 'DisparoChoque's.
desChoques :: [Jogador] -- ^ A lista de 'Jogador'es do 'Estado' em causa.
           -> [Disparo] -- ^ A lista de 'Disparo's do 'Estado' em causa.
           -> [Picture] -- ^ A lista de 'Picture' resultante, com os respetivos 'DisparoChoque's distintos.
desChoques _ [] = []
desChoques js (d:ds) = case d of
      DisparoChoque num _ -> (Translate ((c+1)*tm) ((-l-1)*tm) (Color (encontraIndiceLista num coresX) tiroXD)) : desChoques js ds
             where (m,n) = posicaoJogador (encontraIndiceLista num js)
                   (l,c) = (fromIntegral m, fromIntegral n)
      _ -> desChoques js ds

-- | Dado um 'Event' e um 'DataJogo', produz o resultado desse 'Event' efetuando mudanças no 'Estado' incial.
reageEvento :: Event -- ^ O 'Event' a considerar.
            -> DataJogo -- ^ O 'DataJogo' em questão.
            -> DataJogo -- ^ O 'DataJogo' resultante de premir uma certa tecla.
reageEvento (EventKey (Char 'w') Down _ _) (e,n,ti,p) = ((jogada 0 (Movimenta C) e),n,ti,p)
reageEvento (EventKey (Char 's') Down _ _) (e,n,ti,p) = ((jogada 0 (Movimenta B) e),n,ti,p)
reageEvento (EventKey (Char 'd') Down _ _) (e,n,ti,p) = ((jogada 0 (Movimenta D) e),n,ti,p)
reageEvento (EventKey (Char 'a') Down _ _) (e,n,ti,p) = ((jogada 0 (Movimenta E) e),n,ti,p)
reageEvento (EventKey (Char 't') Down _ _) (e,n,ti,p) = ((jogada 1 (Movimenta C) e),n,ti,p)
reageEvento (EventKey (Char 'h') Down _ _) (e,n,ti,p) = ((jogada 1 (Movimenta D) e),n,ti,p)
reageEvento (EventKey (Char 'g') Down _ _) (e,n,ti,p) = ((jogada 1 (Movimenta B) e),n,ti,p)
reageEvento (EventKey (Char 'f') Down _ _) (e,n,ti,p) = ((jogada 1 (Movimenta E) e),n,ti,p)
reageEvento (EventKey (Char 'i') Down _ _) (e,n,ti,p) = ((jogada 2 (Movimenta C) e),n,ti,p)
reageEvento (EventKey (Char 'l') Down _ _) (e,n,ti,p) = ((jogada 2 (Movimenta D) e),n,ti,p)
reageEvento (EventKey (Char 'k') Down _ _) (e,n,ti,p) = ((jogada 2 (Movimenta B) e),n,ti,p)
reageEvento (EventKey (Char 'j') Down _ _) (e,n,ti,p) = ((jogada 2 (Movimenta E) e),n,ti,p)
reageEvento (EventKey (SpecialKey KeyUp) Down _ _) (e,n,ti,p) = ((jogada 3 (Movimenta C) e),n,ti,p)
reageEvento (EventKey (SpecialKey KeyRight) Down _ _) (e,n,ti,p) = ((jogada 3 (Movimenta D) e),n,ti,p)
reageEvento (EventKey (SpecialKey KeyDown) Down _ _) (e,n,ti,p) = ((jogada 3 (Movimenta B) e),n,ti,p)
reageEvento (EventKey (SpecialKey KeyLeft) Down _ _) (e,n,ti,p) = ((jogada 3 (Movimenta E) e),n,ti,p) 
reageEvento (EventKey (Char '1') Down _ _) (e,n,ti,p) = ((jogada 0 (Dispara Canhao) e),n,ti,p)
reageEvento (EventKey (Char '2') Down _ _) (e,n,ti,p) = ((jogada 0 (Dispara Laser) e),n,ti,p)
reageEvento (EventKey (Char '3') Down _ _) (e,n,ti,p) = ((jogada 0 (Dispara Choque) e),n,ti,p)
reageEvento (EventKey (Char '4') Down _ _) (e,n,ti,p) = ((jogada 1 (Dispara Canhao) e),n,ti,p)
reageEvento (EventKey (Char '5') Down _ _) (e,n,ti,p) = ((jogada 1 (Dispara Laser) e),n,ti,p)
reageEvento (EventKey (Char '6') Down _ _) (e,n,ti,p) = ((jogada 1 (Dispara Choque) e),n,ti,p)
reageEvento (EventKey (Char '7') Down _ _) (e,n,ti,p) = ((jogada 2 (Dispara Canhao) e),n,ti,p)
reageEvento (EventKey (Char '8') Down _ _) (e,n,ti,p) = ((jogada 2 (Dispara Laser) e),n,ti,p)
reageEvento (EventKey (Char '9') Down _ _) (e,n,ti,p) = ((jogada 2 (Dispara Choque) e),n,ti,p)
reageEvento (EventKey (Char ',') Down _ _) (e,n,ti,p) = ((jogada 3 (Dispara Canhao) e),n,ti,p)
reageEvento (EventKey (Char '.') Down _ _) (e,n,ti,p) = ((jogada 3 (Dispara Laser) e),n,ti,p)
reageEvento (EventKey (Char '-') Down _ _) (e,n,ti,p) = ((jogada 3 (Dispara Choque) e),n,ti,p)
reageEvento (EventKey (SpecialKey KeySpace) Down _ _) (_,n,_,p) | (n+1) == length estadosIniciais = (head estadosIniciais, 0, 0,p)
                                                              | otherwise = (encontraIndiceLista (n+1) estadosIniciais, (n+1), 0,p)
reageEvento _ d = d

-- | Dado um 'Float' e um 'DataJogo', efetua a passagem do tempo no 'Cronometro', produzindo assim um novo 'DataJogo'.
reageTempo :: Float -- ^ 
           -> DataJogo -- ^
           -> DataJogo -- ^
reageTempo _ (e,n,ti,p) = (tick e, n,ti + 1,p)

-- | Dada uma 'Direcao' e uma 'Picture', produz a 'Picture' com a rotação associada à 'Direcao'.
direcaoRoda :: Direcao -- ^ A 'Direcao' em questão.
            -> Picture -- ^ A 'Picture' inicial.
            -> Picture -- ^ A 'Picture' obtida.
direcaoRoda d p = case d of
                   C -> p
                   _ -> direcaoRoda (pred d) (Rotate 90 p)  

tankss :: Picture
tankss = Translate (-8*tm) (28*tm) (Text "TANKS")

tankstitle :: Picture
tankstitle = Scale (0.5) (0.5) tankss

stats :: Estado -> Picture
stats est = Pictures [jogador1 est,jogador2 est,jogador3 est,jogador4 est,jogador1L est,jogador2L est,jogador3L est,jogador4L est,
                 jogador1Q est,jogador2Q est,jogador3Q est,jogador4Q est,tankstitle,j1t,j2t,j3t,j4t]

j1t = Translate (17*tm) (11*tm) tankq
j2t = Translate (17*tm) (-12*tm) tankq1
j3t = Translate (-23*tm) (11*tm) tankq2
j4t = Translate (-23*tm) (-12*tm) tankq3

jogador1 est = Scale (0.2*tm/25) (0.2*tm/25) $ Translate (70*tm) (65*tm) (Text $ "JOGADOR 1  VIDAS" ++ " " ++ (show (vidasJogador (encontraIndiceLista 0 (jogadoresEstado est)))))
jogador1L est = Scale (0.2*tm/25) (0.2*tm/25) $ Translate (103*tm) (58*tm) (Text $ "LASERS" ++ " " ++ (show $ lasersJogador $ encontraIndiceLista 0 $ jogadoresEstado est))
jogador1Q est = Scale (0.2*tm/25) (0.2*tm/25) $ Translate (98*tm) (51*tm) (Text $ "CHOQUES" ++ " " ++ (show $ choquesJogador $ encontraIndiceLista 0 $ jogadoresEstado est))
jogador2 est = Scale (0.2*tm/25) (0.2*tm/25) $ Translate (69*tm) (-51*tm) (Text $ "JOGADOR 2  VIDAS" ++ " " ++ (show (vidasJogador (encontraIndiceLista 1 (jogadoresEstado est)))))
jogador2L est = Scale (0.2*tm/25) (0.2*tm/25) $ Translate (103*tm) (-58*tm) (Text $ "LASERS" ++ " " ++ (show $ lasersJogador $ encontraIndiceLista 1 $ jogadoresEstado est))
jogador2Q est = Scale (0.2*tm/25) (0.2*tm/25) $ Translate (98*tm) (-65*tm) (Text $ "CHOQUES" ++ " " ++ (show $ choquesJogador $ encontraIndiceLista 1 $ jogadoresEstado est))
jogador3 est = Scale (0.2*tm/25) (0.2*tm/25) $ Translate (-130*tm) (65*tm) (Text $ "JOGADOR 3  VIDAS" ++ " " ++ (show (vidasJogador (encontraIndiceLista 2 (jogadoresEstado est)))))
jogador3L est = Scale (0.2*tm/25) (0.2*tm/25) $ Translate (-96*tm) (58*tm) (Text $ "LASERS" ++ " " ++ (show $ lasersJogador $ encontraIndiceLista 2 $ jogadoresEstado est))
jogador3Q est = Scale (0.2*tm/25) (0.2*tm/25) $ Translate (-101*tm) (51*tm) (Text $ "CHOQUES" ++ " " ++ (show $ choquesJogador $ encontraIndiceLista 2 $ jogadoresEstado est))
jogador4 est = Scale (0.2*tm/25) (0.2*tm/25) $ Translate (-130*tm) (-51*tm) (Text $ "JOGADOR 4  VIDAS" ++ " " ++ (show (vidasJogador (encontraIndiceLista 3 (jogadoresEstado est)))))
jogador4L est = Scale (0.2*tm/25) (0.2*tm/25) $ Translate (-96*tm) (-58*tm) (Text $ "LASERS" ++ " " ++ (show $ lasersJogador $ encontraIndiceLista 3 $ jogadoresEstado est))
jogador4Q est = Scale (0.2*tm/25) (0.2*tm/25) $ Translate (-101*tm) (-65*tm) (Text $ "CHOQUES" ++ " " ++ (show $ choquesJogador $ encontraIndiceLista 3 $ jogadoresEstado est))

timer ti = Scale (0.5) (0.5) $ Translate 0 (-32*tm) (Text (show ti))