-- | Este módulo define funções genéricas sobre vetores e matrizes, que serão úteis na resolução do trabalho prático.
module Tarefa0_2018li1g156 where

import LI11819

-- * Funções não-recursivas.

-- | Um 'Vetor' é uma 'Posicao' em relação à origem.
type Vetor = Posicao
-- ^ <<http://oi64.tinypic.com/mhvk2x.jpg vetor>>

-- ** Funções sobre vetores

-- *** Funções gerais sobre 'Vetor'es.

-- | Soma dois 'Vetor'es.
somaVetores :: Vetor -> Vetor -> Vetor
somaVetores (x1,y1) (x2,y2) = (x1+x2,y1+y2)

-- | Subtrai dois 'Vetor'es.
subtraiVetores :: Vetor -> Vetor -> Vetor
subtraiVetores (x1,y1) (x2,y2) = (x1-x2,y1-y2)

-- | Multiplica um escalar por um 'Vetor'.
multiplicaVetor :: Int -> Vetor -> Vetor
multiplicaVetor a (x,y) = (x*a,y*a)

-- | Roda um 'Vetor' 90º no sentido dos ponteiros do relógio, alterando a sua direção sem alterar o seu comprimento (distância à origem).
--
-- <<http://oi65.tinypic.com/2j5o268.jpg rodaVetor>>
rodaVetor :: Vetor -> Vetor
rodaVetor (y,x) = (x,-y)

-- | Espelha um 'Vetor' na horizontal (sendo o espelho o eixo vertical).
--
-- <<http://oi63.tinypic.com/jhfx94.jpg inverteVetorH>>
inverteVetorH :: Vetor -> Vetor
inverteVetorH (x,y) = (x,-y)

-- | Espelha um 'Vetor' na vertical (sendo o espelho o eixo horizontal).
--
-- <<http://oi68.tinypic.com/2n7fqxy.jpg inverteVetorV>>
inverteVetorV :: Vetor -> Vetor
inverteVetorV (x,y) = (-x,y)

-- *** Funções do trabalho sobre 'Vetor'es.

-- | Devolve um 'Vetor' unitário (de comprimento 1) com a 'Direcao' dada.
direcaoParaVetor :: Direcao -> Vetor
direcaoParaVetor C = (-1,0)
direcaoParaVetor E = (0,-1)
direcaoParaVetor D = (0,1)
direcaoParaVetor B = (1,0)

-- ** Funções sobre listas

-- *** Funções gerais sobre listas.
--
-- Funções não disponíveis no 'Prelude', mas com grande utilidade.

-- | Verifica se o indice pertence à lista.
eIndiceListaValido :: Int -> [a] -> Bool
eIndiceListaValido a list = a >= 0 && a < length list
-- ** Funções sobre matrizes.

-- *** Funções gerais sobre matrizes.

-- | Uma matriz é um conjunto de elementos a duas dimensões.
--
-- Em notação matemática, é geralmente representada por:
--
-- <<https://upload.wikimedia.org/wikipedia/commons/d/d8/Matriz_organizacao.png matriz>>
type Matriz a = [[a]]

-- | Calcula a dimensão de uma matriz.
--
-- __NB:__ Note que não existem matrizes de dimensão /m * 0/ ou /0 * n/, e que qualquer matriz vazia deve ter dimensão /0 * 0/.
dimensaoMatriz :: Matriz a -> Dimensao
dimensaoMatriz [] = (0,0) 
dimensaoMatriz (h:t) | length h == 0 = (0, 0)
                     | otherwise = (length (h:t), length (x:xs))
                       where (x:xs) = h  

-- | Verifica se a posição pertence à matriz.
ePosicaoMatrizValida :: Posicao -> Matriz a -> Bool 
ePosicaoMatrizValida (_,_) [] = False
ePosicaoMatrizValida (0,0) l = True
ePosicaoMatrizValida (x,y) (h:t) = x >= 0 && x < (length (h:t)) && y < (length h) && y >= 0
                                       

-- | Verifica se a posição está numa borda da matriz.
eBordaMatriz :: Posicao -> Matriz a -> Bool
eBordaMatriz (x,y) (h:t) = x == (length (h:t)) - 1 || x == 0 || y == (length h) - 1 || y == 0   

-- *** Funções do trabalho sobre matrizes.

-- | Converte um 'Tetromino' (orientado para cima) numa 'Matriz' de 'Bool'.
--
-- <<http://oi68.tinypic.com/m8elc9.jpg tetrominos>>
tetrominoParaMatriz :: Tetromino -> Matriz Bool
tetrominoParaMatriz p | p == I = [[False, True, False, False],
                                  [False, True, False, False],
                                  [False, True, False, False],
                                  [False, True, False, False]] 
                      | p == J = [[False, True, False],
                                  [False, True, False],
                                  [True,  True, False]]
                      | p == L = [[False, True, False],
                                  [False, True, False],
                                  [False, True, True ]]
                      | p == O = [[True, True],
                                  [True, True]]
                      | p == S = [[False, True,  True ],
                                  [True,  True,  False],
                                  [False, False, False]] 
                      | p == T = [[False, False, False],
                                  [True,  True,  True ],
                                  [False, True,  False]]
                                                     
                      | p == Z = [[True,  True,  False],
                                  [False, True,  True ],
                                  [False, False, False]]
                      |otherwise = []

-- * Funções recursivas.

-- ** Funções sobre listas.
--
-- Funções não disponíveis no 'Prelude', mas com grande utilidade.

-- | Devolve o elemento num dado índice de uma lista.
encontraIndiceLista :: Int -> [a] -> a
encontraIndiceLista 0 l = head l
encontraIndiceLista n (h:t) = encontraIndiceLista (n-1) t   



-- | Modifica um elemento num dado índice.
--
-- __NB:__ Devolve a própria lista se o elemento não existir.
atualizaIndiceLista :: Int -> a -> [a] -> [a]
atualizaIndiceLista _ _ [] = []
atualizaIndiceLista 0 a (h:t) = a : t
atualizaIndiceLista a b (h:t) = if (a <0 || a >= (length (h:t))) then (h:t) else h : atualizaIndiceLista (a-1) b t
-- ** Funções sobre matrizes.

-- | Roda uma 'Matriz' 90º no sentido dos ponteiros do relógio.
--
-- <<http://oi68.tinypic.com/21deluw.jpg rodaMatriz>>
rodaMatriz :: Matriz a -> Matriz a
rodaMatriz = undefined  

-- | Inverte uma 'Matriz' na horizontal.
--
-- <<http://oi64.tinypic.com/iwhm5u.jpg inverteMatrizH>>
inverteMatrizH :: Matriz a -> Matriz a
inverteMatrizH [] = []
inverteMatrizH (h:t) = inverteListaH h : inverteMatrizH t
               where inverteListaH [] = []
                     inverteListaH (x:xs) = (inverteListaH xs) ++ [x]
-- | Inverte uma 'Matriz' na vertical.
--
-- <<http://oi64.tinypic.com/11l563p.jpg inverteMatrizV>>
inverteMatrizV :: Matriz a -> Matriz a
inverteMatrizV (h:t) =  undefined


-- | Cria uma nova 'Matriz' com o mesmo elemento.
criaMatriz :: Dimensao -> a -> Matriz a 
criaMatriz (x,y) elem | x <= 0 || y <= 0 = []
                      | otherwise = criaXlinhas x (criaYcolunas y elem)     
                        where criaYcolunas 0 elem = []
                              criaYcolunas y elem = elem : criaYcolunas (y-1) elem
                              criaXlinhas 0 l = [] 
                              criaXlinhas x l = l : (criaXlinhas (x-1) l)

-- | Devolve o elemento numa dada 'Posicao' de uma 'Matriz'.
encontraPosicaoMatriz :: Posicao -> Matriz a -> a
encontraPosicaoMatriz (0,0) (h:t) = x
                                  where (x:_) = h
encontraPosicaoMatriz (0,y) (h:t) = encontraIndiceLista y h                                 
encontraPosicaoMatriz (x,y) (h:t) = encontraPosicaoMatriz (x-1,y) t

-- | Modifica um elemento numa dada 'Posicao'
--
-- __NB:__ Devolve a própria 'Matriz' se o elemento não existir.
atualizaPosicaoMatriz :: Posicao -> a -> Matriz a -> Matriz a
atualizaPosicaoMatriz (_,_) _ [] = []  
atualizaPosicaoMatriz (x,0) newElem (h:t) = (subsColuna x newElem h) : t  
                                    where subsColuna 0 newElem (a:l) = newElem : l
                                          subsColuna x newElem (a:l) = a : subsColuna (x-1) newElem l  
atualizaPosicaoMatriz (x,y) newElem (h:t) |  (0 < x || x >= length (h:t) || 0 < y  || y >= length h) = (h:t)
                                          | otherwise = h : (atualizaPosicaoMatriz  (x,y-1) newElem t)
                      
                                    
                                      


