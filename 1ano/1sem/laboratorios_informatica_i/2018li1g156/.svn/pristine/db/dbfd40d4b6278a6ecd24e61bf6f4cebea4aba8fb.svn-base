-- | Este módulo define funções comuns da Tarefa 4 do trabalho prático.
module Tarefa4_2018li1g156 where
import Tarefa3_2018li1g156
import Tarefa2_2018li1g156
import Tarefa1_2018li1g156
import Tarefa0_2018li1g156
import LI11819

testel = [MudaParede,Move C,Move B,Move B,Move D,Move D,Move D,Move D,Move B,Move B,Move E,Move C,Move E,Move C,Move C,Move E,Move C,Desenha,Move D,Move D]
-- * Testes
-- | Testes unitários da Tarefa 4.
--
-- Cada teste é um 'Estado'.
testesT4 :: [Estado]
testesT4 = []

-- * Funções principais da Tarefa 4.

-- | Avança o 'Estado' do jogo um 'Tick' de tempo.
--
-- __NB:__ Apenas os 'Disparo's afetam o 'Estado' do jogo com o passar do tempo.
--
-- __NB:__ Deve chamar as funções 'tickChoques', 'tickCanhoes' e 'tickLasers' pela ordem definida.
tick :: Estado -- ^ O 'Estado' anterior.
     -> Estado -- ^ O 'Estado' após um 'Tick'.
tick = tickChoques . tickCanhoes . tickLasers

-- | Avança o 'Estado' do jogo um 'Tick' de tempo, considerando apenas os efeitos dos tiros de 'Laser' disparados.
tickLasers :: Estado -> Estado
tickLasers e@(Estado a b c) = undefined 

destroiL :: Disparo -> Mapa -> Mapa
destroiL d@(DisparoLaser a (x,y) c) m | c == C && ((encontraPosicaoMatriz (x+1,y+1) m) == Bloco Indestrutivel) = m
                                      | c == C && ((encontraPosicaoMatriz (x+1,y) m) == Bloco Indestrutivel) = m
                                      | c == C = destroiL (DisparoLaser a (x-1,y) c) newMapa
                                      | c == D && ((encontraPosicaoMatriz (x+1,y+1) m) == Bloco Indestrutivel) = m
                                      | c == D && ((encontraPosicaoMatriz (x,y+1) m) == Bloco Indestrutivel) = m
                                      | c == D = destroiL (DisparoLaser a (x-1,y) c) newMapa
                                      | c == B && ((encontraPosicaoMatriz (x+1,y+1) m) == Bloco Indestrutivel) = m
                                      | c == B && ((encontraPosicaoMatriz (x+1,y) m) == Bloco Indestrutivel) = m
                                      | c == B = destroiL (DisparoLaser a (x+1,y) c) newMapa
                                      | c == E && ((encontraPosicaoMatriz (x+1,y+1) m) == Bloco Indestrutivel) = m
                                      | c == E && ((encontraPosicaoMatriz (x,y+1) m) == Bloco Indestrutivel) = m
                                      | c == E = destroiL (DisparoLaser a (x+1,y) c) newMapa
                                       where newMapa = ((atualizaPosicaoMatriz (x+1,y+1) (Vazia)) . (atualizaPosicaoMatriz (somaVetores (x+1,y+1) (encDirDes c)) (Vazia))) m
destroiL _ m = m

encDirDes :: Direcao -> Posicao
encDirDes d | d == C = (0,-1)
            | d == D = (-1,0)
            | d == B = (0,-1)
            | d == E = (-1,0)

destroiLc :: Disparo -> Mapa -> [Disparo] -> Disparo
destroiLc l@(DisparoLaser a (x,y) b) m ((DisparoCanhao n (z,w) d):t) | b == C && ((encontraPosicaoMatriz (x+1,y+1) m) == Bloco Indestrutivel) = l
                                                                     | b == C && ((encontraPosicaoMatriz (x+1,y) m) == Bloco Indestrutivel) = l
                                                                     | b == D && ((encontraPosicaoMatriz (x+1,y+1) m) == Bloco Indestrutivel) = l
                                                                     | b == D && ((encontraPosicaoMatriz (x,y+1) m) == Bloco Indestrutivel) = l
                                                                     | b == B && ((encontraPosicaoMatriz (x+1,y+1) m) == Bloco Indestrutivel) = l
                                                                     | b == B && ((encontraPosicaoMatriz (x+1,y) m) == Bloco Indestrutivel) = l
                                                                     | b == E && ((encontraPosicaoMatriz (x+1,y+1) m) == Bloco Indestrutivel) = l
                                                                     | b == E && ((encontraPosicaoMatriz (x,y+1) m) == Bloco Indestrutivel) = l
                                                                     | (x==z && y==w) =  
                                                                     | otherwise = destroiLc (DisparoLaser a (somaVetores (x,y) (direcaoParaVetor b)) b) m d 

-- | Avança o 'Estado' do jogo um 'Tick' de tempo, considerando apenas os efeitos das balas de 'Canhao' disparadas.
tickCanhoes :: Estado -> Estado
tickCanhoes = undefined

-- | Avança o 'Estado' do jogo um 'Tick' de tempo, considerando apenas os efeitos dos campos de 'Choque' disparados.
tickChoques :: Estado -> Estado
tickChoques = undefined


