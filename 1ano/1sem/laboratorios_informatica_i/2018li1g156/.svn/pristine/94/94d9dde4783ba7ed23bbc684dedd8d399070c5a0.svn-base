-- | Este módulo define funções comuns da Tarefa 2 do trabalho prático.
module Tarefa2_2018li1g156 where

import LI11819
import Tarefa0_2018li1g156
import Tarefa1_2018li1g156


-- * Testes

-- | Testes unitários da Tarefa 2.
--
-- Cada teste é um triplo (/identificador do 'Jogador'/,/'Jogada' a efetuar/,/'Estado' anterior/).
testesT2 :: [(Int,Jogada,Estado)]
testesT2 = []

-- * Funções principais da Tarefa 2.

-- | Efetua uma jogada.
jogada :: Int -- ^ O identificador do 'Jogador' que efetua a jogada.
       -> Jogada -- ^ A 'Jogada' a efetuar.
       -> Estado -- ^ O 'Estado' anterior.
       -> Estado -- ^ O 'Estado' resultante após o jogador efetuar a jogada.


jogada numJogador (Movimenta dir) estado  | zeroVidas jogadorEmCausa = estado
                                       -- | emChoque numJogador (x,y) (disparosEstado estado) || dir /= direcaoJogador jogadorEmCausa 
                                          = estado {jogadoresEstado = atualizaIndiceLista numJogador (jogadorEmCausa {direcaoJogador = dir}) (jogadoresEstado estado)}
                                          | caminhoLivre (x + vX, y + vY) dir listaSemNumJog (mapaEstado estado) 
                                          = estado { jogadoresEstado = atualizaIndiceLista numJogador (jogadorEmCausa {posicaoJogador = (x + vX, y + vY)}) (jogadoresEstado estado) } 
                                          | otherwise = estado
                                    where (x, y) = posicaoJogador jogadorEmCausa
                                          (vX, vY) = direcaoParaVetor dir
                                          jogadorEmCausa = encontraIndiceLista numJogador (jogadoresEstado estado)
                                          listaSemNumJog = retiraIndice numJogador (jogadoresEstado estado)

jogada numJogador (Dispara arma) estado | zeroBalas jogadorEmCausa arma = estado
                                        | otherwise = estado {jogadoresEstado = atualizaIndiceLista numJogador jogadorUpd (jogadoresEstado estado), disparosEstado = (novoDisparo:(disparosEstado estado))}
                  where jogadorEmCausa = encontraIndiceLista numJogador (jogadoresEstado estado)
                        (jogadorUpd, novoDisparo) = parJogadorDisparo numJogador jogadorEmCausa arma  


retiraIndice :: Int -> [a] -> [a]
retiraIndice _ [] = []
retiraIndice n (h:t) | n == 0 = t
                     | otherwise = h : (retiraIndice (n-1) t)


caminhoLivre :: PosicaoGrelha -> Direcao -> [Jogador] -> Mapa -> Bool
caminhoLivre (x,y) dir [] m  | dir == C = encontraPosicaoMatriz (x, y + 1) m == Vazia  && encontraPosicaoMatriz (x , y) m == Vazia 
                             | dir == B = encontraPosicaoMatriz (x + 1, y + 1) m == Vazia  && encontraPosicaoMatriz (x + 1, y) m == Vazia
                             | dir == E = encontraPosicaoMatriz (x + 1, y) m == Vazia  && encontraPosicaoMatriz (x , y) m == Vazia
                             | dir == D = encontraPosicaoMatriz (x + 1, y + 1) m == Vazia  && encontraPosicaoMatriz (x, y + 1) m == Vazia
caminhoLivre (x,y) dir (h:t) m = ((x-x1)^2 + (y-y1)^2 > 2) && caminhoLivre (x,y) dir t m 
                   where (x1,y1) = posicaoJogador h 


zeroVidas :: Jogador -> Bool
zeroVidas j = vidasJogador j == 0




{-emChoque :: Int -> PosicaoGrelha -> [Disparo] -> Bool
emChoque n (x,y) [] = False 
emChoque n (x,y) ((h@DisparoChoque nJ (xD, yD) ):t)  | (n /= jogadorDisparo h) && (distQua == 4 || distQua == 5 || distQua == 9 || distQua) == 10 = True
                                      | otherwise = emChoque n (x,y) t 
                  where distQua = (x - xD)^2 + (y - yD)^2
                        (xD, yD) = posicaoDisparo DisparoChoque
emChoque n (x,y) (_:t) = emChoque (x,y) t
-}

parJogadorDisparo :: Int -> Jogador -> Arma -> (Jogador, Disparo)
parJogadorDisparo n jgr arma | arma == Canhao = ( jgr , 
                                                  DisparoCanhao { jogadorDisparo = n, 
                                                                  posicaoDisparo = (x + vX, y + vY), 
                                                                  direcaoDisparo = direcaoJogador jgr })	                                                    
                             | arma == Laser =  ( jgr { lasersJogador = (lasersJogador jgr) - 1} ,
                             	                  DisparoLaser { jogadorDisparo = n,
                             	                                posicaoDisparo = (x + vX, y + vY),
                             	                                direcaoDisparo = direcaoJogador jgr} )
                             | arma == Choque = ( jgr { choquesJogador = (choquesJogador jgr) - 1}, 
                             	                  DisparoChoque { jogadorDisparo = n,
                             	                                  tempoDisparo = 5})
      where (x, y)   = posicaoJogador jgr
            (vX, vY) = direcaoParaVetor (direcaoJogador jgr)
                                                                                                                     

zeroBalas :: Jogador -> Arma -> Bool
zeroBalas jgr Choque = choquesJogador jgr == 0
zeroBalas jgr Laser = lasersJogador jgr == 0 
zeroBalas jgr _ = False



{-dispararCanhao :: Jogador -> Int -> Disparo
dispararCanhao jgr n = DisparoCanhao {jogadorDisparo = n, 
                                      posicaoDisparo = (x + vX, y + vY), 
                                      direcaoDisparo = direcaoJogador jgr}
      where (x, y)   = posicaoJogador jgr
            (vX, vY) = direcaoParaVetor (direcaoJogador jgr)

podeDispararLaser :: Jogador -> Jogador
podeDispararLaser jgr | lasersJogador jgr == 0 = jgr
                      | otherwise = jgr {lasersJogador = (lasersJogador jgr)-1}


dispararLaser :: Jogador -> Int -> Disparo
dispararLaser jgr a = DisparoLaser {jogadorDisparo = a,posicaoDisparo = (aux (direcaoJogador jgr) (posicaoJogador jgr)),direcaoDisparo = direcaoJogador jgr} 

dispararChoque :: Jogador -> Int -> Disparo
dispararChoque jgr a = DisparoChoque {jogadorDisparo = a,tempoDisparo = 5}



podeDispararChoque :: Jogador -> Jogador 
podeDispararChoque jgr | choquesJogador jgr == 0 = jgr
                       | otherwise = jgr {choquesJogador = (choquesJogador jgr)-1}
-}
